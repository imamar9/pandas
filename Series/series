# # Q-1: Write a program to create an empty series.
series = pd.Series(dtype='int32')

** Q-2: Write a Pandas program to add, subtract, multiple and divide two Pandas Series.
val = ['Add','Sub','Mul','Div']
s1 = pd.Series([10, 15, 20, 25])
s2 = pd.Series([5, 10, 15, 20])

** Q-3 Write a Pandas program to compare the elements of the two Pandas Series.
series1 = pd.Series([2, 4, 6, 8, 10])
series2 = pd.Series([1, 3, 5, 7, 10])

print(series1 == series2)
print("*" * 20)
print(series1 > series2)
print("*" * 20)
print(series1 < series2)

** Q-5.Write a function to change the data type of given a column or a Series. Function takes series and data type as input, returns the converted series.
def change_data_type(series, dt_type):
  """
  takes series as input and changes its data type
  """

  converted_series = ''
  converted_series = pd.to_numeric(series,errors='coerce')
  return converted_series

series = pd.Series([1,2,'Python', 2.0, True, 100])

change_data_type(series,'int32')

** Q-6 Find top 10 most run getter from the series.
runs = pd.read_csv('batsman_runs_series (1).csv')

runs.sort_values('batsman_run', ascending = False).head(10)

** Q-7 No of players having runs above 3000
runs[runs['batsman_run'] > 3000].shape[0]

** Q-8 No of players having runs above mean value?
runs[runs['batsman_run'] > runs['batsman_run'].mean()].shape[0]

** Q-9
i. Read `items.csv` making `item_name` as index.
ii. Show no of nan values
ii. Item price is given in $, so convert it to rupees without currency symbol.
iii. Make data type of newly made series as float.
iv. Fill nan with mean of the series

items = pd.read_csv('items (1).csv', index_col = 'item_name').squeeze('columns')

items.head()

items.isna().sum()

def rupees(x):
  try:
    y = x[1:]
  except:
    y = x
  return float(y) * 80.49

items = items.apply(rupees)

items = items.astype('float32')

items.fillna(items.mean())

** Q-10:
i. Find mean price
ii. Find 30th and 6th percentile value
iii. Plot Histogram on price with bin size 50
iv. No of items price lies between [1000 to 2000]

items.mean()

items.quantile(0.3)

items.quantile(0.06)

items.plot.hist(bins=50)

items[(items>1000) & (items < 2000)].shape[0]
